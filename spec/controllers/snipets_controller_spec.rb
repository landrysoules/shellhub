require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SnipetsController do

  let(:current_user){
    current_user = build_stubbed(:user)
  }

  let(:generic_snippet){
    generic_snippet = build_stubbed(:snipet)
  }

  before{
    allow(Snipet).to receive(:find).and_return(generic_snippet)
  }
  
  describe "GET #index" do
    let(:all_snippets){
      all_snippets = build_list(:snipet, 10)
    }
    before{
      allow(Snipet).to receive(:all).and_return(all_snippets)
    }
    it "assigns all snippets as @snipets" do
      get :index, {}
      expect(assigns(:snipets)).to eq(all_snippets)
    end

    it "renders index template" do
      expect(get :index, {}).to render_template(:index)
    end
  end

  # Can't figure out why this test fails!!??
  describe "GET #my_snipets" do
    let(:my_snippets){my_snippets = build_list(:snipet, 10)}
    before{allow(Snipet).to receive(:where).and_return(my_snippets)}
    it "assigns my snippets as @snipets" do 
      get :my_snipets, {:id => current_user.id}
      expect(assigns(:snipets)).to eq(my_snippets)
    end

    # I don't understand why it fails ;-(
    it "renders index template" do
      expect(get :my_snipets, {:id => current_user.id}).to render_template(:index)
    end
  end

  describe "GET #edit" do
    it "assigns given snippet as @snipet" do
      get :edit, {:id => generic_snippet.id}
      expect(assigns(:snipet)).to eq(generic_snippet)
    end
    it "renders edit template" do
     expect(get :edit, {:id => generic_snippet.id}).to render_template(:edit)
    end
  end

  # Can't figure out why this test fails!!??
  describe "GET my_snipets" do
    it "returns only current user's snippets" do
      my_snippets = build_stubbed(:snipet)
      allow(Snipet).to receive(:where).and_return(my_snippets)
      get :my_snipets, {:id => 1}
      expect(assigns(:snipets)).to eq(my_snippets)
    end
  end

  describe "GET #show" do
    it "shows requested snippet" do
      snipet = build_stubbed(:snipet)
      allow(Snipet).to receive(:find).and_return(snipet)
      allow(User).to receive(:find).and_return(snipet.user_id)
      get :show, {:id => 1}
      expect(assigns(:snipet)).to eq(snipet)
    end
  end

  describe "GET #new" do
    it "assigns a new snipet as @snipet" do
      #sign_in build_stubbed(:user)
      get :new, {}
      expect(assigns(:snipet)).to be_a_new(Snipet)
    end
  end

  describe "GET #edit" do
    it "displays requested snippet for editing" do
      sign_in build_stubbed(:user)
      snipet = build_stubbed(:snipet)
      snipet.id = 1
      allow(Snipet).to receive(:find).and_return(snipet)
      get :edit, {:id => snipet.id}
      expect(assigns(:snipet)).to eq(snipet)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Snipet" do
        snippet = build_stubbed(:snipet)
        snippet.id = nil
        allow(snippet).to receive(:save).and_return(snippet)
        allow(Snipet).to receive(:new).and_return(snippet)
        user = build_stubbed(:user)
        sign_in user
          # IMPORTANT: if you don't send snippet's attributes to the controller, it will just receive snippet's id !!
        post :create, {:snipet => snippet.attributes}
        expect(assigns(:snipet)).to eq(snippet)
        expect(response).to redirect_to({:action => "my_snipets", :id => user.id})
      end

    end

    context "with invalid params" do
      it "assigns a newly created but unsaved snipet as @snipet" do
        sign_in build_stubbed(:user)
        post :create, {:snipet => build_stubbed(:snipet_invalid).attributes}
        expect(assigns(:snipet)).to be_a_new(Snipet)
      end

      it "re-renders the 'new' template" do
        sign_in build_stubbed(:user)
        post :create, {:snipet => build_stubbed(:snipet_invalid).attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      before {
        @update_user = build_stubbed(:user)
        @update_snippet = build_stubbed(:snipet)
        @create_snippet = build_stubbed(:snipet)
        allow(@create_snippet).to receive(:save).and_return(@create_snippet)
        allow(@update_snippet).to receive(:reload).and_return(@update_snippet)
        allow(@update_snippet).to receive(:reload).and_return(@update_snippet)
        allow(Snipet).to receive(:find).and_return(@update_snippet)
        allow(Snipet).to receive(:new).and_return(@create_snippet)
        allow(Snipet).to receive(:save).and_return(@create_snippet)
      }
      it "updates the requested snipet" do
        sign_in @update_user
        post :create, {:snipet => @create_snippet.attributes}
        put :update, {:id => @update_snippet.id, :snipet => @update_snippet.attributes}, :format => :html
        @update_snippet.reload
        expect(@update_snippet.title).to eq("updated title")
      end

      it "assigns the requested snipet as @snipet" do
        sign_in build_stubbed(:user)
        snipet = build_stubbed(:snipet)
        put :update, {:id => snipet.to_param, :snipet => snipet}
        expect(assigns(:snipet)).to eq(snipet)
      end

      it "redirects to the snipet" do
        sign_in build_stubbed(:user)
        snipet = build_stubbed(:snipet)
        put :update, {:id => snipet.to_param, :snipet => snipet}
        expect(response).to redirect_to(snipet)
      end
    end

    context "with invalid params" do
      it "assigns the snipet as @snipet" do
        sign_in build_stubbed(:user)
        snipet = build_stubbed(:snipet)
        put :update, {:id => snipet.to_param, :snipet => build_stubbed(:snipet_invalid)}
        expect(assigns(:snipet)).to eq(snipet)
      end

      it "re-renders the 'edit' template" do
        sign_in build_stubbed(:user)
        snipet = build_stubbed(:snipet)
        put :update, {:id => snipet.to_param, :snipet => build_stubbed(:snipet_invalid)}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do

    it "redirects to the snipets list" do
      sign_in build_stubbed(:user)
      snipet = build_stubbed(:snipet)
      allow(Snipet).to receive(:find).and_return(snipet)
      allow(snipet).to receive(:destroy).and_return(nil)
      delete :destroy, {:id => snipet.to_param}
      expect(response).to redirect_to(snipets_path)
    end
  end

end
