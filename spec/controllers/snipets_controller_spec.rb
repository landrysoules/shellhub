require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SnipetsController do

  # This should return the minimal set of attributes required to create a valid
  # Snipet. As you add validations to Snipet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
   # skip("Add a hash of attributes valid for your model")
    {:title => "My snipet",  :content => "ls"}
  }

  let(:invalid_attributes) {
    #skip("Add a hash of attributes invalid for your model")
    { title: "a", content: "b"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SnipetsController. Be sure to keep this updated too.
  # let(:valid_session) { {"warden.user.user.key" => session["warden.user.user.key"]} }
  # This doesn't seem to apply to Devise (didn't know what to put in :valid_session), so I use Devise's signin helper method.

  describe "GET #index" do
    it "assigns all snipets as @snipets" do
      snipet = Snipet.create! valid_attributes
      get :index, {}
      expect(assigns(:snipets)).to eq([snipet])
    end
  end

  describe "GET #show" do
    it "assigns the requested snipet as @snipet" do
      snipet = Snipet.create! valid_attributes
      get :show, {:id => snipet.to_param}
      expect(assigns(:snipet)).to eq(snipet)
    end
  end

  describe "GET #new" do
    it "assigns a new snipet as @snipet" do
      #sign_in  User.new(email: 'landry@spaceinvade.rs', password: '123456', username: 'landry')
      sign_in build(:user)
      get :new, {}
      expect(assigns(:snipet)).to be_a_new(Snipet)
    end
  end

  describe "GET #edit" do
    it "assigns the requested snipet as @snipet" do
      sign_in build(:user)
      snipet = Snipet.create! valid_attributes
      get :edit, {:id => snipet.to_param}
      expect(assigns(:snipet)).to eq(snipet)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Snipet" do
        sign_in create(:user)
        expect {
          post :create, {:snipet => valid_attributes}
        }.to change(Snipet, :count).by(1)
      end

      it "assigns a newly created snipet as @snipet" do
        sign_in create(:user)
        post :create, {:snipet => valid_attributes}
        expect(assigns(:snipet)).to be_a(Snipet)
        expect(assigns(:snipet)).to be_persisted
      end

    end

    context "with invalid params" do
      it "assigns a newly created but unsaved snipet as @snipet" do
        sign_in create(:user)
        post :create, {:snipet => invalid_attributes}
        expect(assigns(:snipet)).to be_a_new(Snipet)
      end

      it "re-renders the 'new' template" do
        sign_in create(:user)
        post :create, {:snipet => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        # skip("Add a hash of attributes valid for your model")
        {title: "updated title", content: "ls -lrht"}
      }

      it "updates the requested snipet" do
        sign_in build(:user)
        snipet = Snipet.create! valid_attributes
        put :update, {:id => snipet.to_param, :snipet => new_attributes}, :format => :html
        snipet.reload
        puts new_attributes
        expect(snipet.title).to eq("updated title")
      end

      it "assigns the requested snipet as @snipet" do
        sign_in build(:user)
        snipet = Snipet.create! valid_attributes
        put :update, {:id => snipet.to_param, :snipet => valid_attributes}
        expect(assigns(:snipet)).to eq(snipet)
      end

      it "redirects to the snipet" do
        sign_in build(:user)
        snipet = Snipet.create! valid_attributes
        put :update, {:id => snipet.to_param, :snipet => valid_attributes}
        expect(response).to redirect_to(snipet)
      end
    end

    context "with invalid params" do
      it "assigns the snipet as @snipet" do
        sign_in build(:user)
        snipet = Snipet.create! valid_attributes
        put :update, {:id => snipet.to_param, :snipet => invalid_attributes}
        expect(assigns(:snipet)).to eq(snipet)
      end

      it "re-renders the 'edit' template" do
        sign_in build(:user)
        snipet = Snipet.create! valid_attributes
        put :update, {:id => snipet.to_param, :snipet => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested snipet" do
      sign_in build(:user)
      snipet = Snipet.create! valid_attributes
      expect {
        delete :destroy, {:id => snipet.to_param}
      }.to change(Snipet, :count).by(-1)
    end

    it "redirects to the snipets list" do
      sign_in build(:user)
      snipet = Snipet.create! valid_attributes
      delete :destroy, {:id => snipet.to_param}
      expect(response).to redirect_to(snipets_path)
    end
  end

end
