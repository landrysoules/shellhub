require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SnipetsController do

  let(:current_user){
    current_user = build_stubbed(:user)
  }

  let(:generic_snippet){
    generic_snippet = build_stubbed(:snipet)
  }

  before{
    allow(Snipet).to receive(:find).and_return(generic_snippet)
  }
  
  describe "GET #index" do
    let(:all_snippets){
      all_snippets = build_list(:snipet, 10)
    }
    before{
      allow(Snipet).to receive(:all).and_return(all_snippets)
    }
    it "assigns all snippets as @snipets" do
      get :index, {}
      expect(assigns(:snipets)).to eq(all_snippets)
    end

    it "renders index template" do
      expect(get :index, {}).to render_template(:index)
    end
  end

  # Can't figure out why this test fails!!??
  describe "GET #my_snipets" do
    let(:my_snippets){my_snippets = build_list(:snipet, 10)}
    before{allow(Snipet).to receive(:where).and_return(my_snippets)}
    it "assigns my snippets as @snipets" do 
      get :my_snipets, {:id => current_user.id}
      expect(assigns(:snipets)).to eq(my_snippets)
    end

    # I don't understand why it fails ;-(
    it "renders index template" do
      expect(get :my_snipets, {:id => current_user.id}).to render_template(:index)
    end
  end
end
